/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT MAXAREAS 255
// #CATEGORY "" 
//#DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE

#HELP_BEGIN
   This module is designed as an interface between the other Crestron modules
   and the dynalite systems. This means:
   - it takes care of the checksum calculation of both incomming and outgoing messages.
   - it handles the appropriate time that has to be kept between two outgoing messages.
   - it sends the incomming messages to the corresponding area (i.e. to the "Dynalite_Area"-module
     for which the message is intented).
     
   INPUTS:
   		RX$: Buffers the incomming messages for handling.
   		FROM_AREAS$: Buffers the outgoing messages (comming from the "Dynalite_Area"-module), 
   		             to append the checksum and send them out with the appropriate interval
   OUTPUTS:
   		TX$: Output to the Dynalite System
   		TO_AREA$: After handling the messages in RX$ will be sent over this signal to 
   		          the right "Dynalite_Area"-module.  
   
   So, one program will probably contain one Dynalite_Receiver module with multiple Dynalite_Area modules.
   
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT 
// ANALOG_INPUT 
// STRING_INPUT 

BUFFER_INPUT RX$[2000];
BUFFER_INPUT FROM_AREAS$[2000];

STRING_OUTPUT TX$;
STRING_OUTPUT TO_AREA$[MAXAREAS];
// ANALOG_OUTPUT 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// }

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK1, xOK2, Marker1, Marker2, area, lastArea;
STRING TempString1[8], TempString2[8], TEMPRX[200], checksum[1];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function show(string toondeze)
{
    integer i;
    print("\n");
    for (i = 1 to len(toondeze))
    {
    	print("%x ", byte(mid(toondeze, i, 1), 1));
    }
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/


String_Function checked(String to_check)
{
    integer sum;
    integer i;
    sum = 0;
    for (i = 1 to len(to_check))
    {
    	sum = sum + byte(mid(to_check, i, 1), 1);
    }
    sum = -sum;
    Return (chr(sum));
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

CHANGE RX$
{
	if (xOK1)
	{
		xOK1 = 0;
		while (len(RX$))
		{
			if (len(RX$) >= 8)
				{
					TempString1 = remove(mid(RX$, 1, 8), RX$);
					area = byte(mid(TempString1, 2, 1), 1);
					if (mid(TempString1, 8, 1) = checked(mid(TempString1, 1, 7)))
					{
						if (area <= lastArea && area > 0)
							{
								TO_AREA$[area] = TempString1;	
							}
					}
					area = 0;
					clearbuffer(TempString1);
				}
		}
		xOK1 = 1;
	}    
}

CHANGE FROM_AREAS$
{
	if (xOK2)
	{
		xOK2 = 0;
		while (len(FROM_AREAS$))
		{
			wait(20)
			{
				if (len(FROM_AREAS$) >= 7)
				{
					TempString2 = remove(left(FROM_AREAS$, 7), FROM_AREAS$);
					checksum = checked(TempString2);
					TempString2 = TempString2 + checksum;
					MakeString(TX$, "%s", TempString2);
					clearbuffer(TempString2);
				}
			}
		}
		xOK2 = 1;
	}    
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    xOK1 = 1;
    xOK2 = 1;
    Marker1 = 0;
    Marker2 = 0;
    for (lastArea = MAXAREAS to 1 step -1)
	{
		if (isSignalDefined(TO_AREA$[lastArea]))
		{
			break;
		}
	}
}



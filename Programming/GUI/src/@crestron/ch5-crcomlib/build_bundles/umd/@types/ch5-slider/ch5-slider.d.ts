import { ICh5SliderAttributes } from "../_interfaces/ch5-slider/i-ch5-slider-attributes";
import { Ch5CommonInput } from "../ch5-common-input";
import { TCh5SliderDirection, TCh5SliderHandle, TCh5SliderOrientation, TCh5SliderShape, TCh5SliderSize, TCh5SliderStretch, TCh5SliderTooltipDisplay, TCh5SliderTooltipType } from '../_interfaces/ch5-slider/types';
export interface IRcbSignal {
    rcb: {
        time: number;
        value: number;
        startt?: number;
        startv?: number;
    };
}
export interface IRcbUpdateValue {
    oldValue?: number;
    newValue: number;
}
export declare class Ch5Slider extends Ch5CommonInput implements ICh5SliderAttributes {
    static MIN_VALUE: number;
    static MAX_VALUE: number;
    static DEFAULT_STEP: number;
    static SHAPES: TCh5SliderShape[];
    static ORIENTATIONS: TCh5SliderOrientation[];
    static SIZES: TCh5SliderSize[];
    static STRETCHES: TCh5SliderStretch[];
    static DIRECTION: TCh5SliderDirection[];
    static TOOLTIPS: TCh5SliderTooltipType[];
    static TDISPLAY: TCh5SliderTooltipDisplay[];
    private _elSlider;
    private _tgtEls;
    private _tooltip;
    primaryCssClass: string;
    cssClassPrefix: string;
    private _wasRendered;
    private _handleShape;
    protected _value: number;
    private _range;
    private _valueHigh;
    private _max;
    private _min;
    private _orientation;
    private _size;
    private _handleSize;
    private _step;
    private _stretch;
    private _ticks;
    private _showTickValues;
    private _toolTipShowType;
    private _toolTipDisplayType;
    private _tapSettable;
    private _direction;
    private _sendEventOnChangeSigName;
    private _sendEventOnChangeHighSigName;
    private _receiveStateValueSignal;
    private _subReceiveValueId;
    private _subReceiveAnalogValueId;
    private _receiveStateValueSignalHigh;
    private _subReceiveValueHighId;
    private _subReceiveAnalogValueHighId;
    private _noHandle;
    private _pressable;
    sliderEvent: Event;
    slidestartEvent: Event;
    slideendEvent: Event;
    focusEvent: Event;
    blurEvent: Event;
    changeEvent: Event;
    dirtyEvent: Event;
    cleanEvent: Event;
    protected _cleanValueHigh: (string | number);
    protected _dirtyValueHigh: (string | number);
    protected _dirtyTimerHandleHigh: number | null;
    protected _cleanLow: boolean;
    protected _dirtyLow: boolean;
    protected _cleanHigh: boolean;
    protected _dirtyHigh: boolean;
    private _animationTimer;
    private _tooltipValueFromSignal;
    private _tooltipHighValueFromSignal;
    private _rcbSignalValue;
    private _rcbSignalValueHigh;
    private _animatingHandle;
    ready: Promise<void>;
    handleShape: TCh5SliderShape;
    value: number | string;
    range: boolean | string;
    valueHigh: number | string;
    readonly noHandle: boolean;
    max: number | string;
    min: number | string;
    orientation: TCh5SliderOrientation;
    size: TCh5SliderSize;
    handleSize: TCh5SliderSize;
    step: number | string;
    stretch: TCh5SliderStretch;
    ticks: string;
    showTickValues: boolean | string;
    toolTipShowType: TCh5SliderTooltipType;
    toolTipDisplayType: TCh5SliderTooltipDisplay;
    tapSettable: boolean | string;
    direction: TCh5SliderDirection;
    sendEventOnChange: string;
    sendEventOnChangeHigh: string;
    receiveStateValue: string;
    receiveStateValueHigh: string;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    static readonly observedAttributes: string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    unsubscribeFromSignals(): void;
    getCssClassDisabled(): string;
    submit(): void;
    reset(): void;
    setClean(): void;
    setDirty(): void;
    protected setDirtyValue(handle: TCh5SliderHandle, value: string[]): void;
    protected setInputValue(): void;
    protected updateForChangeInDisabledStatus(): void;
    protected createInternalHtml(): void;
    protected initAttributes(): void;
    protected updateCssClasses(): void;
    protected attachEventListeners(): void;
    protected removeEvents(): void;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    private _generateListOfAllPossibleComponentCssClasses();
    private _render();
    private _setSliderValue(value, handle, time?);
    private _onSliderSlide(value, handle);
    private _onSliderStart(value, handle);
    private _onSliderStop(value, handle);
    private _onSliderChange(value, handle);
    private _onFocus(inEvent);
    private _onBlur(inEvent);
    private _applyHandleValueToComponent(handle, value);
    private _sendHandleValueSignal(handle, value);
    private _sendValueForChangeSignal(value);
    private _sendHighValueForChangeSignal(value);
    private _setDirtyHandler(handle);
    private _onDirtyTimerFinished(handle);
    private _maybeSetComponentClean();
    private _parsedSliderOptions();
    private _getRangeFromPips(pips);
    private _maybeSetMinAndMaxFromPips(pips);
    private _parsedTicks();
    private _setDirtyHigh();
    private _setDirtyLow();
    private _setCleanLow();
    private _setCleanHigh();
    private _toolTipDisplayTypeFormater(value);
    private _tooltipValueToPercent(value);
    private _connectDisplayFormater();
    private _startRcbAnimation(animationLength, handle);
    private _stopRcbAnimation(handle);
    private _setStyleParameters(styleParams);
    private _canStopAnimation();
    private _susbscribeToAnalogSignal();
    private _susbscribeToAnalogHighSignal();
    private _unsusbscribeFromAnalogSignals();
    private _unsubscribeFromObjectSignals();
    private _applyTooltipValue(tooltip, value);
    private _calculatedValueWhileInRamp();
    private _calculatedHighValueWhileInRamp();
    private _isRcbValueReceived();
    private _isRcbHighValueReceived();
    private _applySignalReceivedBeforeRender();
    private _adjustTooltipValue(handle);
    private _getStartValue();
    private _getStartValueWhileInRamp();
    private _upgradeProperty(prop);
}

import { Ch5CommonInput } from "../ch5-common-input/ch5-common-input";
import { TCh5TextInputType } from '../_interfaces/ch5-textinput/types/t-ch5-textinput-type';
import { TCh5TextInputTextTransform } from '../_interfaces/ch5-textinput/types/t-ch5-textinput-text-transform';
import { TCh5TextInputStretch } from '../_interfaces/ch5-textinput/types/t-ch5-textinput-stretch';
import { TCh5TextInputSize } from '../_interfaces/ch5-textinput/types/t-ch5-textinput-size';
import { TCh5TextInputIconPosition } from '../_interfaces/ch5-textinput/types/t-ch5-textinput-icon-position';
import HtmlCallback from "../ch5-common/utils/html-callback";
import { ICh5TextInputAttributes } from "../_interfaces/ch5-textinput";
export declare class Ch5Textinput extends Ch5CommonInput implements ICh5TextInputAttributes {
    static TYPES: TCh5TextInputType[];
    static SIZES: TCh5TextInputSize[];
    static STRETCH: TCh5TextInputStretch[];
    static TEXTTRANSFORM: TCh5TextInputTextTransform[];
    static ICONPOSITION: TCh5TextInputIconPosition[];
    static COMPONENT_CONTENT_POSTFIX: string;
    primaryCssClass: string;
    cssClassPrefix: string;
    protected _elInput: HTMLInputElement;
    private _elIcon;
    private _labelElement;
    private _placeholder;
    private _mask;
    private _inputType;
    private _pattern;
    protected _tabIndex: number;
    private _icon;
    private _iconPosition;
    private _minLength;
    private _maxLength;
    private _minValue;
    private _maxValue;
    private _size;
    private _stretch;
    private _scaling;
    private _minimumFontSize;
    private _scalingUtility;
    private _maskingUtility;
    private _textTransform;
    private _label;
    private _sendEventOnChange;
    private _sendEventOnFocus;
    private _sendEventOnBlur;
    private _receiveStateFocus;
    private _receiveStateFocusSub;
    private _receiveStateValue;
    private _receiveStateValueSub;
    private _validityChangeEvent;
    private _dirtyCustomEvent;
    private _cleanCustomEvent;
    private _lastValidState;
    private _onFocusListener;
    private _onBlurListener;
    private _onChangeListener;
    private _onKeyPressListener;
    private _assetsWrapper;
    private _onvaliditychange;
    constructor();
    static readonly observedAttributes: string[];
    connectedCallback(): void;
    disconnectedCallback(): void;
    unsubscribeFromSignals(): void;
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    tabIndex: number;
    placeholder: string;
    icon: string;
    iconPosition: TCh5TextInputIconPosition;
    inputType: TCh5TextInputType;
    minLength: number;
    maxLength: number;
    minValue: number;
    maxValue: number;
    stretch: TCh5TextInputStretch;
    textTransform: TCh5TextInputTextTransform;
    label: string;
    pattern: string;
    sendEventOnChange: string;
    sendEventOnFocus: string;
    sendEventOnBlur: string;
    receiveStateFocus: string;
    receiveStateValue: string;
    validityChangeEvent: CustomEvent;
    dirtyCustomEvent: CustomEvent;
    cleanCustomEvent: CustomEvent;
    lastValidState: boolean;
    setValue(value: string): void;
    mask: string;
    size: TCh5TextInputSize;
    scaling: boolean;
    minimumFontSize: number;
    onvaliditychange: HtmlCallback | (() => void);
    submit(): void;
    dirtyTimerHandle(): void;
    valueSync(): void;
    getCssClassDisabled(): string;
    reset(): void;
    updateValue(value: string, signalResult?: boolean): void;
    focusTheInput(value: boolean): void;
    getValid(): boolean;
    _onKeyPress(inEvent: Event): void;
    _onChange(inEvent: Event): void;
    _onFocus(inEvent: Event): void;
    _onBlur(inEvent: Event): void;
    protected _onChangeSignal(currentElement: HTMLElement, value: string): void;
    protected clearComponentContent(): void;
    protected createInternalHTML(): void;
    protected iconPositioning(): void;
    protected iconPositioningHandler(): void;
    protected initAttributes(): void;
    protected attachEventListeners(): void;
    protected removeEvents(): void;
    private _maskInit();
    private _createValidityChangeEvent(message);
    private _createDirtyCustomEvent(message);
    private _createCleanCustomEvent();
    private _createCustomEvent(eventName, message?);
    private _addLabel();
    private _addModifierClass(className, staticClasses, toChildrens?);
    private _removeModifierClass(classes);
    private _addAriaAttributes();
}

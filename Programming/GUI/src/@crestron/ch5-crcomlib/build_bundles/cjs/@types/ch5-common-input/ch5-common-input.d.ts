import { Ch5Common } from "../ch5-common/ch5-common";
import { ICh5CommonInputAttributes } from "../_interfaces/ch5-common-input/";
import { TCh5CommonInputFeedbackModes } from "../_interfaces/ch5-common-input/types";
import HtmlCallback from "../ch5-common/utils/html-callback";
export declare abstract class Ch5CommonInput extends Ch5Common implements ICh5CommonInputAttributes {
    static FEEDBACKMODES: TCh5CommonInputFeedbackModes[];
    protected _elInput: HTMLInputElement;
    protected _signalValueSyncTimeout: number;
    protected _cleanValue: (string | number | boolean);
    protected _clean: boolean;
    protected _dirtyValue: (string | number | boolean);
    protected _dirty: boolean;
    protected _submitted: boolean;
    protected _dirtyTimerHandle: number | null;
    protected _feedbackMode: TCh5CommonInputFeedbackModes;
    protected _value: (string | number | boolean);
    protected _required: boolean;
    protected _ondirtyCallback: HtmlCallback | {};
    protected _oncleanCallback: HtmlCallback | {};
    constructor();
    abstract submit(): void;
    abstract reset(): void;
    getDirty(): boolean;
    feedbackMode: TCh5CommonInputFeedbackModes;
    signalValueSyncTimeout: number | string;
    cleanValue: (string | number | boolean);
    dirtyValue: (string | number | boolean);
    value: (string | number | boolean);
    setValue(value: string | number): void;
    getValue(): string | number | boolean;
    required: boolean;
    oncleanCallback: HtmlCallback | {};
    onclean: {};
    ondirtyCallback: HtmlCallback | {};
    ondirty: {};
    setClean(): void;
    setDirty(): void;
    getValid(): boolean;
    static readonly observedAttributes: string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    protected initAttributes(): void;
    protected highlightInputIfNotValid(): void;
    protected handleModifierClass(className: string, action?: string): void;
    protected runEventHandlers(handler: string, event?: Event): void;
    private runOncleanHandler(event);
    private runOndirtyHandler(event);
}
